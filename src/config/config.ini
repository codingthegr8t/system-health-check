; [If you want to ignore some components just add values that the system will never reach (Example: set values for cpu_threshold = 101). This way you can ignore the compoments that you don't want to monitor.]
[general]
# @The disks to monitor
# Windows: The disks are usually named C:\, D:\
# Linux: The disks are usaully /, /home or /dev/sda1
disks = /

# @Disk threshold in percent(%). If the available disk space falls below this percentage, a warning will be triggered.
# GENERAL INFO: Disk availability threshold of 20-25% would give you more time to respond to space issues (such as by deleting unnecessary files or adding more storage) before the disk becomes completely full.
# DEFAULT: disk_threshold = 20
disk_threshold = 20

# @CPU threshold in percent(%). If the CPU usage exceeds this value, a warning will be triggered.
# GENERAL INFO: CPU usage threshold of 85-90% is common. If your CPU usage consistently exceeds this level, it could indicate that your system is under-provisioned for the workload it's running, leading to slower performance.
# DEFAULT: cpu_threshold = 90
cpu_threshold = 90

# @RAM threshold in percent(%). If the RAM usage exceeds this value, a warning will be triggered
# GENERAL INFO: RAM usage threshold of 85-90% is often used. If your system consistently exceeds this level of RAM usage, it may start swapping memory to disk, which can significantly slow down your system.
# DEFAULT: ram_threshold = 90
ram_threshold = 90

# @GPU threshold in percent(%) and Temperature in celsius(â„ƒ). If the GPU usage exceeds this value, a warning will be triggerd
# GENERAL INFO: 
# + GPU Utilization    \ For intensive tasks like gaming or deep learning, it's normal for the GPU utilization to be very high (e.g., 90-100%). This simply means that the GPU is being fully utilized. 
#                      /---- If you're seeing level of utilization 90-100% when no GPU-intensive tasks are running, it might indicate a problem such as a runaway process or malware.
# + Memory Utilization \ Similar to GPU utilization, But if it's consistently at or near 100%, even when not running such tasks, this could be a sign of a problem. 
#                      /---- High GPU memory utilization can lead to issues like slower performance or out-of-memory errors.
# + Temperature        \ Each GPU model has a different maximum safe temperature, but a good general threshold is around 80-85 degrees Celsius.
# DEFAULT: gpu_threshold = 95
# DEFAULT: gpu_memory_threshold = 98
# DEFAULT: gpu_temp_threshold = 85
gpu_threshold = 95
gpu_memory_threshold = 98
gpu_temp_threshold = 85

# @By default, the logging level is set to INFO, which ensures recording of routine operational information during the script's execution.
# However, it is possible to adjust this level to WARNING. Before you do this, bear in mind that such a shift will exclude the logs of INFO level, leading to less detailed data being captured.
# !Please note for WARNING: The change to WARNING level is advised mostly if you plan to use the script's monitoring feature continuously, without a `specified check frequency`. Switching to this level reduces the volume of logged data, 
#   - thereby conserving storage space. But proceed with caution!  -  while it helps to prevent log files from occupying excessive space, it may also leave out valuable details that could be crucial for problem diagnosis.
log_level = INFO

[time]
# @Check Frequency: This allows you to modify how often the system performs its checks.
# @Email Retry Delay: If there's an interruption while sending emails, you can specify how long the system should wait before attempting to resend.
# !Note: Both check_frequency & email_retry_delay uses the module sleep.time that operates in seconds.
# DEFAULT: Check Frequency = 3600 seconds, equivalent to 1 hour. If you want the script to run continuously without any breaks, set this value to 0.
# DEFAULT: Retry Delay = 900 seconds, equivalent to 15 minutes. With the maximum of 6 retry attempts, this means the script will shut down after 1 hour and 30 minutes if it's unable to send the email.
#   - Note! The Email Retry Delay has an upper limit of 43200 seconds or 12 hours. Considering a maximum of 6 retry attempts, this translates to a 3-day period after which the script will terminate if it consistently fails to deliver emails.
check_frequency = 3600
email_retry_delay = 900

# To avoid spamming your email box: Don't send mail for 1800 seconds (30 min) between alerts
alert_cooldown_time = 1800

[email]
# @The recipient is the email that you would like to receive the notifications.
# DEFAULT: alert_subject_template = Alert: {device_name} {resource_name} high usage
# DEFAULT: alert_body_template = The {resource_name} usage on {device_name} is above the threshold of {threshold}%%.
# Recommendation for personal email: Instead of your main password, use an app password or a one-time password.
smtp_server = smtp.example.com
smtp_port = 587
smtp_username = your_username
smtp_password = your_password
recipient = recipient@example.com
alert_subject_template = Alert: {device_name} {resource_name} high usage
alert_body_template = The {resource_name} usage on {device_name} is above the threshold of {threshold}%%.
